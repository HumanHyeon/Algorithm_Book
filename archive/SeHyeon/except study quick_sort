{4} 8 2 5 9 7 1 6 10

{4} <8> 5 2 9 [1] 6 10
{4} 1 5 2 9 8 6 10

{4} 1 <5> [2] 9 8 6 10
{4} 1 2 5 9 8 6 10

{4} 1 [2] <5> 9 8 6 10
except : i > j	//change j & pivot
{2} 1 4 {5} 9 8 6 10


#include <stdio.h>

int data[10] = { 4, 1, 2, 3, 9, 7, 8, 6, 10, 5 };

void quick_sort(int* data, int start, int end) {
	int pivot = data[start];
	int left = start + 1;
	int right = end;

	while (left <= right) {
		while (data[left] < pivot)	left++;		//find bigger than pivot
		while (data[right] > pivot)	right--;	//find smaller than pivot
		if (left <= right) {
			int tmp = data[left];
			data[left] = data[right];
			data[right] = tmp;
		}
		else {
			int tmp = data[right];
			data[right] = pivot;
			data[start] = tmp;
		}
	}

	if (start < end) {
		quick_sort(data, start, right - 1);
		quick_sort(data, right + 1, end);
	}
}

int main() {
	quick_sort(data, 0, 9);

	for (int i = 0; i < 10; i++)
		printf("%d ", data[i]);
	putchar('\n');
}
