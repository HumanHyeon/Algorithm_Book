// algorithm_clock_sync.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.

//시계 12시로 전부 맞추기 문제입니다.
/*
0번    0,1,2			5번    0,2,14,15
1번    3,7,9,11			6번    3,14,15
2번    4,10,14,15		7번    4,5,7,14,15
3번    0,4,5,6,7		8번    1,2,3,4,5
4번    6,7,8,10,12		9번    3,4,5,9,13
*/

#include "stdafx.h"
#include<stdio.h>
#include<iostream>
#include<time.h>
#pragma warning(disable:4996)
using namespace std;

int 시계[4][4];
int cng[4][4];// 몇 번 조작되어야 0이 되는지를 표시함.
int cng_tmp[4][4];//되돌릴 때 쓸 거임.

int btn[10][5] = { //버튼 10개
	{ 0,1,2,-1,-1},
	{ 3,7,9,11,-1},
	{ 4,10,14,15,-1},
	{ 0,4,5,6,7 },
	{ 6,7,8,10,12 },
	{ 0,2,14,15,-1},
	{ 3,14,15,-1,-1},
	{ 4,5,7,14,15 },
	{ 1,2,3,4,5 },
	{ 3,4,5,9,13 }
};
int cnt = 0;
void make_clock(int 시계[4][4]); //시계를 만들어 주는 함수
void cnt_cng(); //변경된 횟수를 세어 줍니다.

int main()
{
	make_clock(시계);
	
	cout << "********생성된 시계를 보여줍니다.*********\n\n";
	for (int i = 0; i < 4; i++) {
		cout << "\t";
		for (int j = 0; j < 4; j++) {
			cout << 시계[i][j] << "\t";
		}
		cout << "\n";
	}

	cout << "\n********\tcng\t*********\n\n";
	for (int i = 0; i < 4; i++) {
		cout << "\t";
		for (int j = 0; j < 4; j++) {
			cout << cng[i][j] << "\t";
		}
		cout << "\n";
	}
	cnt_cng();
	cout <<"누를 버튼의 최소 횟수는: " << cng;

	return 0;
}

void make_clock(int 시계[4][4]) { // 랜덤으로 시계를 만들어 줍니다.  0: 12시 / 3: 3시 / 6: 6시 / 9: 9시
	
	srand((unsigned int)time(0));
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			int t = rand() % 4;
			시계[i][j] = t*3;
			if (t == 0) {
				cng[i][j] = 0; 
				cng_tmp[i][j] = cng[i][j];
			}else{
				cng[i][j] = 4 - t; //바뀌어야 하는 횟수??
				cng_tmp[i][j] = cng[i][j];
			}
		}
	}
}

void cnt_cng() {

	bool end = false;
	int i = 0;
	int index = -1;

	while (end == false) {
		if (i == 10)i = 0;
		cout << i;

		for (int a = 0; a < 4;a++) {
			for (int j = 0; j < 4;j++) {
				if (cng[a][j] != 0) // 0이 아닌 놈이 있으면 break하고 버튼 누르러 가기
					break;
				else if ((a==3 && j==3)&&(cng[a][j] == 0)) {
					end = true; // 모든 넘들이 0이 되어야 true 졸업 가능
				}
			}
		}

		for (int j = 0; j < 5; j++) {
			if (btn[i][j] == -1) continue; // 시계 5개를 건들지 않는 버튼도 잇으므로
			
			index = btn[i][j];

			if (cng[(int)index / 4][(int)index % 4] != 0) {//해당 index의 값이 0이 아니라면
				cng_tmp[(int)index / 4][(int)index % 4] = cng[(int)index / 4][(int)index % 4];//임시저장소
				cng[(int)index / 4][(int)index % 4] -= 1; //해당 index의 값을 바꿔 줌.
			}
			else {//해당 index의 값이 0이라면 -1이 되므로 버튼 카운트 하지 않아야함.
				cnt -= 1;
				cng = cng_tmp; // 상태 원상복귀 시키기
				break;
			}
		}
		cnt += 1;
		i++;//다음 버튼을 누릅니다.
	}

}


